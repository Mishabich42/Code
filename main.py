import requests
from bs4 import BeautifulSoup
import openpyxl
import time
import concurrent.futures


def get_item_prices(item_code, server="europe"):
    """
    –û—Ç—Ä–∏–º—É—î —Ü—ñ–Ω–∏ –Ω–∞ –ø—Ä–µ–¥–º–µ—Ç –∑ —Å–∞–π—Ç—É. –Ø–∫—â–æ –¥–ª—è –º—ñ—Å—Ç–∞ —î –∫—ñ–ª—å–∫–∞ —Ü—ñ–Ω,
    –ø–æ–≤–µ—Ä—Ç–∞—î —Ç—ñ–ª—å–∫–∏ –Ω–∞–π–Ω–∏–∂—á—É.
    """
    if "_LEVEL" in item_code and item_code[-1].isdigit():
        enchantment_level = item_code[-1]
        url_param = f"{item_code}@{enchantment_level}"
    else:
        url_param = item_code

    url = f"https://albiononlinetools.com/economy/item.php?itemPrice={url_param}&server={server}"
    price_data = {}

    try:
        response = requests.get(url, timeout=15)
        if response.status_code != 200:
            print(f"  -> –ü–æ–º–∏–ª–∫–∞ –∑–∞–ø–∏—Ç—É –¥–ª—è {item_code}: –°—Ç–∞—Ç—É—Å {response.status_code}")
            return {}

        soup = BeautifulSoup(response.text, "html.parser")
        table = soup.find(class_="table-responsive")

        if not table or not table.find("tbody"):
            print(f"  -> –ù–µ –∑–Ω–∞–π–¥–µ–Ω–æ —Ç–∞–±–ª–∏—Ü—é –∑ —Ü—ñ–Ω–∞–º–∏ –¥–ª—è {item_code}")
            return {}

        rows = table.find("tbody").find_all("tr")
        for row in rows:
            cols = [c.get_text(strip=True) for c in row.find_all("td")]
            if len(cols) > 1:
                city_name = cols[1].split(" (")[0]
                price_str = cols[2]

                try:
                    current_price = int(price_str.replace(',', ''))
                except ValueError:
                    continue

                if city_name not in price_data or current_price < price_data[city_name]:
                    price_data[city_name] = current_price

    except requests.RequestException as e:
        print(f"  -> –ü–æ–º–∏–ª–∫–∞ –º–µ—Ä–µ–∂—ñ –ø—Ä–∏ –æ–±—Ä–æ–±—Ü—ñ {item_code}: {e}")
        return {}

    return price_data


def update_sheet(sheet):
    """
    –û–Ω–æ–≤–ª—é—î —Ü—ñ–Ω–∏ –¥–ª—è –æ–¥–Ω–æ–≥–æ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –∞—Ä–∫—É—à–∞ (sheet).
    """
    print(f"\n--- –ü–æ—á–∞—Ç–æ–∫ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è –∞—Ä–∫—É—à–∞: '{sheet.title}' ---")
    header = [cell.value for cell in sheet[1]]
    city_columns = {city_name: col_idx + 1 for col_idx, city_name in enumerate(header) if
                    city_name and city_name != 'Item'}

    if not city_columns:
        print(f"-> –ü—Ä–æ–ø—É—Å–∫–∞—î–º–æ –∞—Ä–∫—É—à '{sheet.title}', –æ—Å–∫—ñ–ª—å–∫–∏ –≤—ñ–Ω –Ω–µ –º–∞—î —Å—Ç–æ–≤–ø—Ü—ñ–≤ –∑ –Ω–∞–∑–≤–∞–º–∏ –º—ñ—Å—Ç.")
        return

    for row_index in range(2, sheet.max_row + 1):
        item_code = sheet.cell(row=row_index, column=1).value
        if not item_code:
            continue


        prices = get_item_prices(item_code)

        for city, col_idx in city_columns.items():
            price_to_write = prices.get(city, '-')
            sheet.cell(row=row_index, column=col_idx).value = price_to_write

        time.sleep(0.1)
    print(f"--- ‚úÖ –ó–∞–≤–µ—Ä—à–µ–Ω–æ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è –∞—Ä–∫—É—à–∞: '{sheet.title}' ---")


# --- –ì–û–õ–û–í–ù–ê –ß–ê–°–¢–ò–ù–ê ---
if __name__ == "__main__":
    excel_file_name = "test.xlsx"

    try:
        workbook = openpyxl.load_workbook(excel_file_name)
        sheet_names = workbook.sheetnames
    except FileNotFoundError:
        print(f"‚ùå –ü–æ–º–∏–ª–∫–∞: –§–∞–π–ª '{excel_file_name}' –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ.")
        exit()

    print("–î–æ—Å—Ç—É–ø–Ω—ñ –∞—Ä–∫—É—à—ñ –≤ —Ñ–∞–π–ª—ñ:")
    for i, name in enumerate(sheet_names):
        print(f"  {i + 1}: {name}")
    print("\n  0: –û–Ω–æ–≤–∏—Ç–∏ –í–°–Ü –∞—Ä–∫—É—à—ñ (–ø–∞—Ä–∞–ª–µ–ª—å–Ω–æ)")

    try:
        choice = int(input("\n–í–≤–µ–¥—ñ—Ç—å –Ω–æ–º–µ—Ä –∞—Ä–∫—É—à–∞ –¥–ª—è –æ–Ω–æ–≤–ª–µ–Ω–Ω—è: "))

        if choice == 0:
            # --- –ù–û–í–ê –õ–û–ì–Ü–ö–ê –î–õ–Ø –ü–ê–†–ê–õ–ï–õ–¨–ù–û–ì–û –û–ù–û–í–õ–ï–ù–ù–Ø ---
            # –í–∏ –º–æ–∂–µ—Ç–µ –∑–º—ñ–Ω–∏—Ç–∏ max_workers, —â–æ–± –∫–æ–Ω—Ç—Ä–æ–ª—é–≤–∞—Ç–∏ –∫—ñ–ª—å–∫—ñ—Å—Ç—å –æ–¥–Ω–æ—á–∞—Å–Ω–∏—Ö –ø–æ—Ç–æ–∫—ñ–≤
            # –ë—ñ–ª—å—à–µ –ø–æ—Ç–æ–∫—ñ–≤ = —à–≤–∏–¥—à–µ, –∞–ª–µ –±—ñ–ª—å—à–µ –Ω–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –Ω–∞ —Å–∞–π—Ç
            max_workers = 5
            print(f"\nüöÄ –ó–∞–ø—É—Å–∫–∞—î–º–æ –ø–∞—Ä–∞–ª–µ–ª—å–Ω–µ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è –≤—Å—ñ—Ö –∞—Ä–∫—É—à—ñ–≤ —É {max_workers} –ø–æ—Ç–æ–∫–∞—Ö...")

            with concurrent.futures.ThreadPoolExecutor(max_workers=max_workers) as executor:
                # –°—Ç–≤–æ—Ä—é—î–º–æ –∑–∞–¥–∞—á—É –¥–ª—è –∫–æ–∂–Ω–æ–≥–æ –∞—Ä–∫—É—à–∞ –≤ –∫–Ω–∏–∑—ñ
                # workbook —î —ñ—Ç–µ—Ä–∞—Ç–æ—Ä–æ–º, —è–∫–∏–π –ø–æ–≤–µ—Ä—Ç–∞—î –æ–±'—î–∫—Ç–∏ –∞—Ä–∫—É—à—ñ–≤
                executor.map(update_sheet, workbook)

        elif 1 <= choice <= len(sheet_names):
            # –û–Ω–æ–≤–ª–µ–Ω–Ω—è –æ–¥–Ω–æ–≥–æ –≤–∏–±—Ä–∞–Ω–æ–≥–æ –∞—Ä–∫—É—à–∞ (—è–∫ —ñ —Ä–∞–Ω—ñ—à–µ)
            selected_sheet = workbook[sheet_names[choice - 1]]
            update_sheet(selected_sheet)
        else:
            print("‚ùå –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–∏–π –≤–∏–±—ñ—Ä. –ë—É–¥—å –ª–∞—Å–∫–∞, –≤–≤–µ–¥—ñ—Ç—å —á–∏—Å–ª–æ –∑—ñ —Å–ø–∏—Å–∫—É.")
            exit()

    except ValueError:
        print("‚ùå –ü–æ–º–∏–ª–∫–∞: –ø–æ—Ç—Ä—ñ–±–Ω–æ –≤–≤–µ—Å—Ç–∏ —á–∏—Å–ª–æ.")
        exit()

    try:
        workbook.save(excel_file_name)
        print(f"\nüíæ –í—Å—ñ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è –∑–∞–≤–µ—Ä—à–µ–Ω–æ! –§–∞–π–ª '{excel_file_name}' –∑–±–µ—Ä–µ–∂–µ–Ω–æ.")
    except PermissionError:
        print(
            f"\n‚ùå –ü–æ–º–∏–ª–∫–∞ –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è: –ù–µ –≤–¥–∞–ª–æ—Å—è –∑–±–µ—Ä–µ–≥—Ç–∏ —Ñ–∞–π–ª '{excel_file_name}'. –ú–æ–∂–ª–∏–≤–æ, –≤—ñ–Ω –≤—ñ–¥–∫—Ä–∏—Ç–∏–π –≤ Excel. –ó–∞–∫—Ä–∏–π—Ç–µ –π–æ–≥–æ —Ç–∞ —Å–ø—Ä–æ–±—É–π—Ç–µ –∑–Ω–æ–≤—É.")